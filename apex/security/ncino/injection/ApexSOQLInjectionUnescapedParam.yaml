rules:
  - id: apex.injection.soql-injection.unescaped-param
    mode: taint
    severity: ERROR
    languages:
      - apex
    metadata:
      category: security
      subcategory: injection
      technology: salesforce
    message: >-
      If a dynamic query must be used,leverage nFORCE Query Builder.
      In other programming languages, the related flaw is known as SQL injection.
      Apex doesn't use SQL, but uses its own database query language, SOQL. SOQL is
      much simpler and more limited in functionality than SQL. The risks are much
      lower for SOQL injection than for SQL injection, but the attacks are nearly
      identical to traditional SQL injection. SQL/SOQL injection takes user-supplied
      input and uses those values in a dynamic SOQL query. If the input isn't validated,
      it can include SOQL commands that effectively modify the SOQL statement and trick
      the application into performing unintended commands.
    pattern-sources:
      - by-side-effect: true
        patterns:
          - pattern: $M(...,String $P,...) { ... }
          - focus-metavariable: $P
    pattern-sanitizers:
      - pattern-either:
        - pattern: String.escapeSingleQuotes($P)
        - pattern: Database.query(<... String.escapeSingleQuotes($P) ...>)
    pattern-sinks:
      - pattern: Database.query(<... $P ...>)
